"use client";

import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { completeSchema } from '@/lib/questionnaire/complete-schema';
import type { AnswerRecord, InputStep, MultiStep, QuestionStep, SingleStep, ZipListStep } from '@/lib/questionnaire/types';
import { computeNextStepId } from '@/lib/questionnaire/engine';
import Progress from './Progress';

type Props = {
  variant?: string;
  tunnelId: string;
  schemaId?: string; // pour futur multi-schéma
  onComplete?: (payload: unknown) => void;
};

function isSingle(step: QuestionStep): step is SingleStep {
  return step.kind === 'single';
}
function isMulti(step: QuestionStep): step is MultiStep {
  return step.kind === 'multi';
}
function isInput(step: QuestionStep): step is InputStep {
  return step.kind === 'input';
}
function isZipList(step: QuestionStep): step is ZipListStep {
  return step.kind === 'ziplist';
}

export default function Questionnaire({ variant = 'default', tunnelId, schemaId = 'lead-capture', onComplete }: Props) {
  const schema = useMemo(() => completeSchema, []);
  const [answers, setAnswers] = useState<AnswerRecord[]>([]);
  const [currentStepId, setCurrentStepId] = useState<string>(schema.entryStepId);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [history, setHistory] = useState<string[]>([]);
  const sessionIdRef = useRef<string>('');
  const utmRef = useRef<Record<string, string | null>>({});

  const currentStep = useMemo(() => schema.steps.find(s => s.id === currentStepId), [schema, currentStepId]);
  const containerRef = useRef<HTMLDivElement | null>(null);

  // Charger session locale
  useEffect(() => {
    const key = `q:${schema.id}:v:${schema.version}:state`;
    try {
      const saved = typeof window !== 'undefined' ? window.localStorage.getItem(key) : null;
      if (saved) {
        const parsed = JSON.parse(saved);
        if (parsed?.answers) setAnswers(parsed.answers);
        if (parsed?.currentStepId && schema.steps.some(s => s.id === parsed.currentStepId)) {
          setCurrentStepId(parsed.currentStepId);
        } else {
          setCurrentStepId(schema.entryStepId);
        }
        if (parsed?.sessionId) sessionIdRef.current = parsed.sessionId;
      }
    } catch {}
    if (!sessionIdRef.current) sessionIdRef.current = crypto.randomUUID();

    // Capture UTM params from URL
    try {
      if (typeof window !== 'undefined') {
        const sp = new URLSearchParams(window.location.search);
        const pick = (k: string) => sp.get(k);
        utmRef.current = {
          utm_source: pick('utm_source'),
          utm_medium: pick('utm_medium'),
          utm_campaign: pick('utm_campaign'),
          utm_term: pick('utm_term'),
          utm_content: pick('utm_content'),
          gclid: pick('gclid'),
          fbclid: pick('fbclid'),
        };
      }
    } catch {}
  }, [schema.id]);

  // Persister session locale
  useEffect(() => {
    const key = `q:${schema.id}:v:${schema.version}:state`;
    try {
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(
          key,
          JSON.stringify({ sessionId: sessionIdRef.current, answers, currentStepId })
        );
      }
    } catch {}
  }, [answers, currentStepId, schema.id, schema.version]);

  const setAnswer = useCallback((stepId: string, value: unknown) => {
    setAnswers(prev => {
      const idx = prev.findIndex(a => a.stepId === stepId);
      if (idx >= 0) {
        const copy = [...prev];
        copy[idx] = { stepId, value };
        return copy;
      }
      return [...prev, { stepId, value }];
    });
    setError(null);
  }, []);

  function formatPhoneUS(input: string): string {
    const digits = (input || '').replace(/\D/g, '').slice(0, 10);
    const p1 = digits.slice(0, 3);
    const p2 = digits.slice(3, 6);
    const p3 = digits.slice(6, 10);
    if (digits.length <= 3) return p1;
    if (digits.length <= 6) return `(${p1}) ${p2}`;
    return `(${p1}) ${p2}-${p3}`;
  }

  const validateCurrent = useCallback((answersSnapshot?: AnswerRecord[]): string | null => {
    if (!currentStep) return null;
    const list = answersSnapshot || answers;
    const ans = list.find(a => a.stepId === currentStep.id)?.value;
    // Le téléphone est la seule question optionnelle
    const isOptional = currentStep.kind === 'input' && currentStep.type === 'tel';
    
    if (!isOptional) {
      // Toutes les autres questions sont obligatoires
      if (ans === undefined || ans === null || ans === '') {
        return 'Please answer this question.';
      }
      if (currentStep.kind === 'ziplist') {
        const arr = Array.isArray(ans) ? ans : [];
        const validZips = arr.filter(v => v && /^(\d{5})$/.test(String(v).trim()));
        const minRequired = currentStep.requiredMin || 1;
        if (validZips.length < minRequired) {
          return `Please provide at least ${minRequired} valid ZIP code(s).`;
        }
      }
      if (currentStep.kind === 'multi') {
        const arr = Array.isArray(ans) ? ans : [];
        const minRequired = currentStep.minSelections || 1;
        if (arr.length < minRequired) {
          return `Please select at least ${minRequired} option(s).`;
        }
      }
      if (currentStep.kind === 'input' && (currentStep.type === 'email')) {
        const email = String(ans);
        const ok = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        if (!ok) return 'Please provide a valid email address.';
        // Règle simple anti "free-mail" pour privilégier les domaines pro
        const domain = email.split('@')[1]?.toLowerCase() || '';
        const freeList = ['gmail.com','yahoo.com','outlook.com','hotmail.com','icloud.com','aol.com','proton.me','protonmail.com','gmx.com','live.com'];
        if (freeList.includes(domain)) return 'Please use a business email address.';
      }
    }
    // Phone is optional, but if provided, validate 10 digits
    if (currentStep?.kind === 'input' && currentStep.type === 'tel') {
      if (typeof ans === 'string' && ans.trim() !== '') {
        const digits = ans.replace(/\D/g, '');
        if (digits.length !== 10) return 'Please provide a valid US phone number.';
      }
    }
    return null;
  }, [answers, currentStep]);

  function buildSnapshotWithCurrentInput(): AnswerRecord[] {
    let snapshot = [...answers]; // Create a copy
    if (!currentStep) return snapshot;
    
    if (isInput(currentStep)) {
      const root = containerRef.current;
      const input = root?.querySelector('input');
      if (input) {
        const raw = (input as HTMLInputElement).value;
        const value = currentStep.type === 'tel' ? formatPhoneUS(raw) : raw;
        const idx = snapshot.findIndex(a => a.stepId === currentStep.id);
        if (idx >= 0) {
          snapshot[idx] = { stepId: currentStep.id, value };
        } else {
          snapshot.push({ stepId: currentStep.id, value });
        }
      }
    }
    
    if (isZipList(currentStep)) {
      const root = containerRef.current;
      const inputs = Array.from(root?.querySelectorAll('input') || []);
      if (inputs.length > 0) {
        // Don't filter out empty values here - let validation handle it
        const values = inputs.map(el => (el as HTMLInputElement).value.trim());
        const idx = snapshot.findIndex(a => a.stepId === currentStep.id);
        if (idx >= 0) {
          snapshot[idx] = { stepId: currentStep.id, value: values };
        } else {
          snapshot.push({ stepId: currentStep.id, value: values });
        }
      }
    }
    
    return snapshot;
  }

  const goNext = useCallback(async () => {
    const snap = buildSnapshotWithCurrentInput();
    if (snap !== answers) setAnswers(snap);
    const validationError = validateCurrent(snap);
    if (validationError) {
      setError(validationError);
      return;
    }
    const rulesNext = computeNextStepId(schema, snap, currentStep?.id, history);
    const stepFallback = currentStep?.transitions?.fallbackNextStepId ?? null;
    const nextId = rulesNext || stepFallback;
    if (!nextId) {
      // Fin — soumission
      setSubmitting(true);
      try {
        const payload = {
          sessionId: sessionIdRef.current,
          tunnelId,
          variant,
          answers: snap,
          completedAt: new Date().toISOString(),
          metadata: {
            referrer: typeof document !== 'undefined' ? document.referrer : null,
            userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : null,
            utm: utmRef.current,
          },
        };
        const res = await fetch('/api/questionnaire/submit', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
        // ignore response body; call callback
        onComplete?.(await res.json());
      } finally {
        setSubmitting(false);
      }
      return;
    }
    setHistory(prev => [...prev, currentStepId]);
    setCurrentStepId(nextId);
  }, [answers, currentStep?.transitions?.fallbackNextStepId, currentStepId, onComplete, schema, tunnelId, validateCurrent, variant]);

  const submitWithAnswers = useCallback(async (answersSnapshot: AnswerRecord[]) => {
    setSubmitting(true);
    try {
      const payload = {
        sessionId: sessionIdRef.current,
        tunnelId,
        variant,
        answers: answersSnapshot,
        completedAt: new Date().toISOString(),
        metadata: {
          referrer: typeof document !== 'undefined' ? document.referrer : null,
          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : null,
          utm: utmRef.current,
        },
      };
      const res = await fetch('/api/questionnaire/submit', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      onComplete?.(await res.json());
    } finally {
      setSubmitting(false);
    }
  }, [onComplete, tunnelId, utmRef, variant]);

  const advanceWithAnswers = useCallback(async (answersSnapshot: AnswerRecord[]) => {
    const rulesNext = computeNextStepId(schema, answersSnapshot, currentStep?.id, history);
    const stepFallback = currentStep?.transitions?.fallbackNextStepId ?? null;
    const nextId = rulesNext || stepFallback;
    if (!nextId) {
      await submitWithAnswers(answersSnapshot);
      return;
    }
    setHistory(prev => [...prev, currentStepId]);
    setCurrentStepId(nextId);
  }, [currentStep?.transitions?.fallbackNextStepId, currentStepId, schema, submitWithAnswers, currentStep?.id, history]);

  const goBack = useCallback(() => {
    setError(null);
    if (history.length === 0) return;
    
    const previousStepId = history[history.length - 1];
    setCurrentStepId(previousStepId);
    setHistory(prev => prev.slice(0, -1)); // Remove last item
  }, [history]);

  if (!currentStep) return null;

  // Progress calculation based on actual questionnaire structure
  const branchId = (() => {
    const ind = answers.find(a => a.stepId === 'primary_industry')?.value;
    return typeof ind === 'string' ? ind : 'unknown';
  })();
  
  const totalByBranch: Record<string, number> = {
    ind_energy: 18, // 3 pré-qual + 15 Energy-specific steps
    ind_petrochem: 17, // 3 pré-qual + 14 Petrochemical steps  
    ind_logistics: 19, // 3 pré-qual + 16 Logistics steps
    ind_manufacturing: 19, // 3 pré-qual + 16 Manufacturing steps
    ind_construction: 19, // 3 pré-qual + 16 Construction steps
    ind_other: 8, // 3 pré-qual + 5 contact info (skip industry questions)
    unknown: 8,
  };
  
  const total = totalByBranch[branchId] ?? 8;
  const currentIndex = history.length + 1;

  const handleEnterKey = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      goNext();
    }
  }, [goNext]);

  // Special handling for thank you page
  const isThankYouPage = currentStep.id === 'thank_you';

  if (isThankYouPage) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4">
        <div className="max-w-2xl mx-auto text-center">
          <div className="bg-white rounded-3xl shadow-2xl p-12 border border-blue-100">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">Assessment Submitted!</h1>
            <p className="text-lg text-gray-600 mb-8">
              Thank you for completing your Climate Vulnerability Assessment.
            </p>
            <div className="bg-blue-50 rounded-2xl p-6 mb-8">
              <h2 className="text-xl font-semibold text-blue-900 mb-3">What happens next?</h2>
              <div className="space-y-3 text-blue-800">
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 bg-blue-200 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-xs font-semibold">1</span>
                  </div>
                  <span>Our climate risk analysts will process your assessment</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 bg-blue-200 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-xs font-semibold">2</span>
                  </div>
                  <span>We'll analyze 25+ years of weather data for your locations</span>
                </div>
                <div className="flex items-center gap-3">
                  <div className="w-6 h-6 bg-blue-200 rounded-full flex items-center justify-center flex-shrink-0">
                    <span className="text-xs font-semibold">3</span>
                  </div>
                  <span><strong>You'll receive your personalized report within 24 hours</strong></span>
                </div>
              </div>
            </div>
            <p className="text-sm text-gray-500">
              Questions? Contact us at <a href="mailto:support@sentinelshield.com" className="text-blue-600 hover:underline">support@sentinelshield.com</a>
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header fixe */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 mb-6 overflow-hidden">
          <div className="bg-gradient-to-r from-slate-900 via-blue-900 to-indigo-900 px-8 py-6 text-white relative">
            <div className="absolute inset-0 bg-gradient-to-r from-black/20 to-transparent"></div>
            <div className="relative z-10">
              <div className="flex items-center gap-4 mb-3">
                <div className="w-10 h-10 bg-white/20 rounded-xl flex items-center justify-center backdrop-blur-sm">
                  <div className="w-5 h-5 bg-white rounded-lg"></div>
                </div>
                <div>
                  <h1 className="text-2xl font-bold">Climate Risk Assessment</h1>
                  <p className="text-blue-100 text-sm opacity-90">Powered by 25+ years of NOAA & FEMA data</p>
                </div>
              </div>
              <Progress current={currentIndex} total={total} stepTitle={currentStep.title} />
            </div>
          </div>
        </div>

        {/* Question Card */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden" onKeyDown={handleEnterKey} ref={containerRef}>
          {/* Question Header */}
          <div className="bg-gradient-to-r from-gray-50 to-blue-50 px-8 py-6 border-b border-gray-200">
            <h2 className="text-2xl font-bold text-gray-900 mb-3 leading-tight">
              {currentStep.title}
            </h2>
            {currentStep.description && (
              <p className="text-gray-700 leading-relaxed text-lg">{currentStep.description}</p>
            )}
          </div>

            {/* Error Message */}
            {error && (
              <div className="mx-8 mb-6 p-4 bg-red-50 border border-red-200 rounded-xl flex items-center gap-3">
                <div className="w-5 h-5 bg-red-500 rounded-full flex-shrink-0"></div>
                <p className="text-red-700 font-medium">{error}</p>
              </div>
            )}

            {/* Answer Options */}
            <div className="p-8 space-y-6">
        {isSingle(currentStep) && (
          <div className="space-y-4">
            {currentStep.options.map((opt, index) => (
              <button
                key={opt.id}
                className="group w-full px-6 py-5 rounded-2xl border-2 border-gray-200 hover:border-blue-400 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 text-left transition-all duration-300 relative overflow-hidden shadow-sm hover:shadow-md"
                onClick={() => {
                  setError(null);
                  // Construire un snapshot synchronisé et avancer sans attendre le re-render
                  const idx = answers.findIndex(a => a.stepId === currentStep.id);
                  const snapshot = idx >= 0
                    ? (() => { const c = [...answers]; c[idx] = { stepId: currentStep.id, value: opt.id }; return c; })()
                    : [...answers, { stepId: currentStep.id, value: opt.id }];
                  setAnswers(snapshot);
                  advanceWithAnswers(snapshot);
                }}
              >
                <div className="flex items-center gap-4">
                  <div className="w-7 h-7 rounded-full border-2 border-gray-300 group-hover:border-blue-500 flex items-center justify-center transition-all duration-200 bg-white group-hover:bg-blue-50">
                    <div className="w-3 h-3 rounded-full bg-transparent group-hover:bg-blue-500 transition-all duration-200"></div>
                  </div>
                  <div className="flex-1">
                    <span className="text-lg font-medium text-gray-900 group-hover:text-blue-900 transition-colors">{opt.label}</span>
                    <div className="text-sm text-gray-500 group-hover:text-blue-600 mt-1 opacity-0 group-hover:opacity-100 transition-opacity">
                      Click to select this option
                    </div>
                  </div>
                  <div className="opacity-0 group-hover:opacity-100 transition-all duration-200 transform translate-x-2 group-hover:translate-x-0">
                    <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center">
                      <span className="text-blue-600 font-semibold">&rarr;</span>
                    </div>
                  </div>
                </div>
              </button>
            ))}
          </div>
        )}

        {isMulti(currentStep) && (
          <MultiEditor step={currentStep} value={(answers.find(a => a.stepId === currentStep.id)?.value as string[]) || []}
            onChange={(v) => setAnswer(currentStep.id, v)} />
        )}

        {isInput(currentStep) && (
          <div className="space-y-2">
            <input
              className="w-full px-4 py-4 rounded-xl border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-100 transition-all duration-200 text-lg"
              type={currentStep.type || 'text'}
              inputMode={currentStep.type === 'tel' ? 'tel' : undefined}
              placeholder={currentStep.placeholder}
              defaultValue={(answers.find(a => a.stepId === currentStep.id)?.value as string) || ''}
              onInput={(e) => {
                if (currentStep.type === 'tel') {
                  const target = e.target as HTMLInputElement;
                  const formatted = formatPhoneUS(target.value);
                  target.value = formatted;
                }
              }}
              onBlur={(e) => {
                const value = currentStep.type === 'tel' ? formatPhoneUS(e.target.value) : e.target.value;
                setAnswer(currentStep.id, value);
              }}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  e.preventDefault();
                  const value = currentStep.type === 'tel' ? formatPhoneUS((e.target as HTMLInputElement).value) : (e.target as HTMLInputElement).value;
                  setAnswer(currentStep.id, value);
                }
              }}
              maxLength={currentStep.type === 'tel' ? 14 : undefined}
              autoComplete={currentStep.type === 'tel' ? 'tel' : currentStep.type === 'email' ? 'email' : 'off'}
            />
            {currentStep.type === 'tel' && (
              <p className="text-sm text-gray-500 px-1">Format: (555) 123-4567</p>
            )}
            {currentStep.type === 'email' && (
              <p className="text-sm text-gray-500 px-1">Please use your business email address</p>
            )}
          </div>
        )}

        {isZipList(currentStep) && (
          <ZipListEditor
            step={currentStep}
            value={(answers.find(a => a.stepId === currentStep.id)?.value as string[]) || []}
            onChange={(v) => setAnswer(currentStep.id, v)}
          />
        )}
          </div>

            {/* Final disclaimers at last step */}
            {!(computeNextStepId(schema, answers, currentStep?.id, history) || currentStep.transitions?.fallbackNextStepId) && (
              <div className="p-6 rounded-2xl border-2 border-amber-200 bg-gradient-to-r from-amber-50 to-yellow-50">
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 rounded-full bg-amber-400 flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-amber-800 text-sm font-bold">!</span>
                  </div>
                  <div>
                    <p className="font-semibold text-amber-900 mb-2">Important Disclaimer</p>
                    <p className="text-amber-800 text-sm leading-relaxed">
                      This is an educational climate risk analysis service. Sentinel Shield provides weather risk intelligence based on 25 years of Texas climate data. We are not insurance agents, brokers, or advisors. This assessment does not constitute insurance advice, recommendations, or solicitation. We do not sell, broker, or advise on insurance products.
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Navigation Footer */}
          <div className="bg-gray-50 px-8 py-6 border-t border-gray-200 flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                type="button"
                className="text-sm text-gray-500 hover:text-gray-700 underline transition-colors"
                onClick={() => {
                  try {
                    const key = `q:${schema.id}:v:${schema.version}:state`;
                    window.localStorage.removeItem(key);
                  } catch {}
                  setAnswers([]);
                  setHistory([]);
                  setCurrentStepId(schema.entryStepId);
                }}
              >
                🔄 Start over
              </button>
              {history.length > 0 && (
                <button
                  type="button"
                  className="inline-flex items-center gap-2 px-4 py-2 rounded-xl border border-gray-300 bg-white hover:bg-gray-50 transition-colors shadow-sm text-gray-700 font-medium"
                  onClick={goBack}
                >
                  <span>&larr;</span> 
                  <span>Previous</span>
                </button>
              )}
            </div>

            <button 
              className="inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-2xl shadow-lg hover:shadow-xl hover:from-blue-700 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-semibold text-lg" 
              onClick={goNext} 
              disabled={submitting}
            >
              {submitting && (
                <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              )}
              <span>
                {(() => {
                  const hasNext = computeNextStepId(schema, answers, currentStep?.id, history) || currentStep.transitions?.fallbackNextStepId;
                  if (hasNext) return 'Continue';
                  return submitting ? 'Submitting...' : 'Submit Assessment';
                })()}
              </span>
              {!submitting && (
                <span className="text-xl">&rarr;</span>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

function MultiEditor({ step, value, onChange }: { step: MultiStep; value: string[]; onChange: (v: string[]) => void }) {
  const [selected, setSelected] = useState<string[]>(value || []);
  useEffect(() => {
    onChange(selected);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selected]);

  // Special handling for consent page
  const isConsentPage = step.title === 'Consent & Disclaimer';

  return (
    <div className={isConsentPage ? "space-y-4" : "grid gap-2"}>
      {step.options.map(opt => {
        const active = selected.includes(opt.id);
        if (isConsentPage) {
          return (
            <label key={opt.id} className="flex items-start gap-3 p-4 rounded-lg border border-gray-200 hover:border-blue-300 transition-colors cursor-pointer">
              <input
                type="checkbox"
                checked={active}
                onChange={() => {
                  setSelected(prev => active ? prev.filter(v => v !== opt.id) : [...prev, opt.id]);
                }}
                className="mt-1 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <span className="text-sm leading-relaxed text-gray-700">
                {opt.label}
                {opt.id === 'consent_educational' && (
                  <span className="block mt-2 text-xs text-blue-600">
                    <a href="/legal/disclaimer" target="_blank" className="underline hover:text-blue-800">
                      Read full disclaimer
                    </a>
                    {' | '}
                    <a href="/legal/terms" target="_blank" className="underline hover:text-blue-800">
                      Terms of service
                    </a>
                  </span>
                )}
                {opt.id === 'consent_agg' && (
                  <span className="block mt-2 text-xs text-blue-600">
                    <a href="/legal/privacy" target="_blank" className="underline hover:text-blue-800">
                      Privacy Policy
                    </a>
                  </span>
                )}
              </span>
            </label>
          );
        }
        return (
          <button
            key={opt.id}
            className={`group w-full px-6 py-4 rounded-2xl border-2 text-left transition-all duration-200 ${
              active 
                ? 'border-blue-500 bg-gradient-to-r from-blue-50 to-indigo-50 shadow-md' 
                : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50 shadow-sm hover:shadow-md'
            }`}
            onClick={() => {
              setSelected(prev => active ? prev.filter(v => v !== opt.id) : [...prev, opt.id]);
            }}
          >
            <div className="flex items-center gap-4">
              <div className={`w-6 h-6 rounded-lg border-2 flex items-center justify-center transition-all ${
                active 
                  ? 'border-blue-500 bg-blue-500' 
                  : 'border-gray-300 group-hover:border-blue-400 bg-white'
              }`}>
                {active && (
                  <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                )}
              </div>
              <span className={`font-medium transition-colors ${
                active ? 'text-blue-900' : 'text-gray-900 group-hover:text-blue-900'
              }`}>
                {opt.label}
              </span>
            </div>
          </button>
        );
      })}
    </div>
  );
}

function ZipListEditor({ step, value, onChange }: { step: ZipListStep; value: string[]; onChange: (v: string[]) => void }) {
  const [items, setItems] = useState<string[]>(() => {
    const initial = Array.from({ length: step.fields }).map((_, i) => value?.[i] || '');
    return initial;
  });
  
  // Sync items to parent immediately when items change
  useEffect(() => {
    onChange(items);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [items]);

  const updateItem = (index: number, newValue: string) => {
    setItems(prev => {
      const copy = [...prev];
      copy[index] = newValue.trim();
      return copy;
    });
  };

  return (
    <div className="space-y-3">
      {items.map((val, i) => (
        <input
          key={i}
          className="w-full px-4 py-3 rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"
          inputMode="numeric"
          pattern="\\d{5}"
          placeholder={`${step.labelPrefix || 'ZIP Code'} ${i + 1}${i === 0 && step.requiredMin > 0 ? ' *' : ''}`}
          value={val}
          onChange={(e) => {
            const v = e.target.value.replace(/\D/g, '').slice(0, 5);
            e.target.value = v;
            updateItem(i, v);
          }}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              e.preventDefault();
              const v = (e.target as HTMLInputElement).value.trim();
              updateItem(i, v);
            }
          }}
        />
      ))}
      <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
        <span className="font-medium">Format:</span> 5 digits (US ZIP codes only). 
        <span className="font-medium"> Minimum required:</span> {step.requiredMin} valid ZIP{step.requiredMin > 1 ? 's' : ''}.
      </p>
    </div>
  );
}


